# 如何描述和评估算法

## 大O表示法的意义
我们要忽略其他不重要的因素,从主要方面看,算法的运行时间N是如何变化的

## 循环不变式
我们大脑在写一个算法或者循环的时候,会让这个算法基于某个基本性质或者等式而保持正确,这个性质在初始,循环迭代,终止,时保持不变
,这就是循环不变式

简要来说:
1. 初始: 初始条件时,性质不变为真
2. 保持: 迭代时,性质不变为真
3. 终止: 结束时,性质仍旧为真

有点像数学归纳法,但是数学归纳法趋向于证明无穷条件下的正确性,算法趋向于证明有限的输入规模下正确.

比如:我们要在书架上找一本叫`算法导论`的书
基本性质:`算法导论在书架上,那么就一定返回序号,否则返回NOT_FIND`

1. 初始条件:i=0,此时输入规模是整个数组,满足性质
2. 保持:输入规模减少到i..(n-1),性质成立
3. 终止,终止条件时,性质成立

循环不变式,要求我们在算法的各个阶段思考算法设计的基础性质始终不变来保持算法的正确性!

## 递归
通过对一系列子问题的求解,最终回归的基础问题
1. 有一个或多个基础条件,不用计算或者能在有限步骤下得出结果
2. 问题的更小规模的相同子问题调用(必须能缩小到基础条件)
   **注意:递归必须要回归与基础条件**

## 算法的伪代码说明
// 要求清晰明了,让别人不管学习什么语言都能看懂,同时你任何时候看也能看懂
说明如下:
1. 算法的函数声明
2. 输入的说明
3. 输出结果的说明
4. 操作步骤:
```c
1.令i从0..(n -1):
    A. .....
    B. .....
        i......
        ii.....
    C. ......
2. .......
3. .......
```

例如:求n的阶乘
long fact(long n)

1. 输入:n : int

2. 结果: n的阶乘值

3. 步骤:

```c
1. 把fact初始赋值为1
2. 令i值为2..n
    A. 让fact乘以i,作为fact的新值
3. 返回fact
```